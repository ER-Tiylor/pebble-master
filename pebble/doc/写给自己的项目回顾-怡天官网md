## 二维数组转化为一维数组
``` javascript
const tileArr = arr => {
      return arr.reduce(
        (acc, cur) => acc.concat(Array.isArray(cur) ? tileArr(cur) : cur),
        []
      );
    };
```

## 将数组按x数量划分为二维数组
``` javascript
const changeArr = arr => {
      let arrTemp = [[]];
      for (let i = 0, p = 0; i < arr.length; i++) {
        if (i > 0 && i % 5 == 0) {
          p++;
          arrTemp.push(new Array());
        }
        arrTemp[p].push(arr[i]);
      }
      return arrTemp;
    };
```

## 邮箱正则 
`` /^([A-Za-z0-9_\-\.])+\@([A-Za-z0-9_\-\.])+\.([A-Za-z]{2,4})$/ ``

## 手机号正则：
`` /^(?:(?:\+|00)86)?1\d{10}$/ ``

## 普通链接转换为下载文件
``` javascript
/**
 * 下载文件
 * @param {String} path - 下载地址/下载请求地址。
 * @param {String} name - 下载文件的名字（考虑到兼容性问题，最好加上后缀名）
 */
export const downloadFile = (path, name) => {
  const xhr = new XMLHttpRequest();
  xhr.open('get', path);
  xhr.responseType = 'blob';
  xhr.send();
  xhr.onload = function () {
    if (this.status === 200 || this.status === 304) {
      const fileReader = new FileReader();
      fileReader.readAsDataURL(this.response);
      fileReader.onload = function () {
        const a = document.createElement('a');
        a.style.display = 'none';
        a.href = this.result;
        a.download = name;
        document.body.appendChild(a);
        a.click();
        document.body.removeChild(a);
      };
    }
  };
};
```
## 替换所有的换行符\n 为 \<br/>
``` javascript
/**
 * 替换所有的换行符\n 为 <br/>
 * @param {String} str - 目标字符串
 */
export const replaceWrap = str => {
  const reg = new RegExp('\n', 'g');
  return str.replace(reg, '<br/>');
};
```
## pxTovw函数（scss）
``` scss
/*_mixins.scss
  pxTovw
  750：设计稿宽度
  $px：元素在设计稿上的宽度
*/
@use "sass:math";
@function vw($px) {
  @return math.div($px,750)*100vw;
}
```

## swiper7在vue3中全局导入及使用
参见：
- https://swiperjs.com/migration-guide
- https://swiperjs.com/vue#installation
- https://blog.csdn.net/weixin_43927930/article/details/118554357
### 依赖 
`` npm i swiper ``
### 全局导入
``` javascript
// src/components/swiper.js
//根据需要加载所需模块( 这儿只需要左右箭头 就没导入其他模块 )
import { Swiper, SwiperSlide } from 'swiper/vue';
import SwiperCore, { Navigation, Autoplay, Pagination, Grid } from 'swiper';
import 'swiper/css/bundle';
SwiperCore.use([Navigation, Autoplay, Pagination, Grid]);
const plugins = [Swiper, SwiperSlide];
const swiper = {
  install: function (app) {
    plugins.forEach(item => {
      app.component(item.name, item);
    });
  }
};

export default swiper;

```
``` javascript
//src/main.js
import swiper from './components/swiper';
app.use(swiper);
```

### 使用
具体配置见参考链接
``` javascript
<template>
  <div class="container">
    <div class="top-bar"></div>
    <div class="swiper-father">
      <div class="top-bg"></div>
      <swiper
        v-if="list.length > 0"
        ref="myswiper"
        @swiper="onSwiper"
        @slideChange="onSlideChange"
        :navigation="swiperOptions.navigation"
        :spaceBetween="swiperOptions.spaceBetween"
        :breakpoints="swiperOptions.breakpoints"
        :autoplay="swiperOptions.autoplay"
        :loop="true"
      >
        <swiper-slide
          class="swiper-slide"
          v-for="(item, index) in list"
          v-bind:key="index"
          @click="toPage(item)"
        >
          <!-- <el-image class="img-box" :src="item.image" alt=""></el-image> -->
          <img class="img-box" :src="item.image" alt="" srcset="" />
        </swiper-slide>
        <div
          @click.prevent="clickSlide"
          class="swiper-button-prev swiper-button-white"
        ></div>
        <div
          @click.prevent="clickSlide"
          class="swiper-button-next swiper-button-white"
        ></div>
      </swiper>
    </div>
    <div class="bottom-bar flex item-center">
      <div class="controls">
        <div class="indicators">
          <div
            class="indicator-item"
            :class="index == curIndex ? 'indicator-active' : ''"
            v-for="(val, index) in list"
            :key="index"
          ></div>
        </div>
        <div class="slide-next" @click="next"></div>
      </div>
    </div>
  </div>
</template>
<script>
import { reactive, toRefs, onMounted, ref } from 'vue';
import { useRouter } from 'vue-router';
export default {
  props: ['list'],
  setup() {
    const router = useRouter();
    const myswiper = ref(null);
    const data = reactive({
      curIndex: 0,
      swiper: null,
      swiperOptions: {
        loop: true,
        autoplay: {
          delay: 3000
        },
        //swiper配置
        spaceBetween: 10,
        navigation: {
          nextEl: '.swiper-button-next',
          prevEl: '.swiper-button-prev'
        },
        breakpoints: {
          //根据页面宽度改变swiper个数
          100: { slidesPerView: 1, spaceBetween: 20 },
          1200: { slidesPerView: 1, spaceBetween: 20 },
          1370: { slidesPerView: 1, spaceBetween: 40 },
          1520: { slidesPerView: 1, spaceBetween: 40 },
          1920: { slidesPerView: 1, spaceBetween: 50 }
        }
      }
    });
    const next = () => {
      data.swiper.slideNext();
    };
    const toPage = item => {
      router.push({
        path: item.url
      });
    };
    const onSwiper = swiper => {
      data.swiper = swiper;
    };
    onMounted(() => {
      console.log(myswiper);
    });
    const onSlideChange = swiper => {
      data.curIndex = swiper.realIndex;
    };
    return {
      onSwiper,
      next,
      toPage,
      myswiper,
      ...toRefs(data),
      onSlideChange
    };
  }
};
</script>
<style lang="scss" scoped>
...
</style>
```
## 数组减操作（即得到S中子集A的补集）
``` javascript
/**
 * 数组减操作
 * @param {Array} S - 数组S
 * @param {Array} A - 数组A
 */
const subArr = (S,A)=>{
  let arrRes = [];
  S.forEach(item => {
    let c = A.findIndex(itm => itm.id == item.id);
    c == -1 ? arrRes.push(item) : "";
  });
  return c
}

```

## 数组连接后去重
``` javascript
function nodup(Arr1,Arr2){
  let nodupArr = Arr1.concat(Arr2);
  let hash = {};
  nodupArr = nodupArr.reduce((res, cur) => {
    hash[cur.id] ? "" : (hash[cur.id] = true && res.push(cur));
    return res;
  }, []);
  return nodupArr;
}
```
## 判断是否是二维数组
```
const isDeep = arr => arr.some(item => item instanceof Array);
```


















TODO：
- [ ] 前端实现上传图片至腾讯云实现过程与组件readme
- [ ] 视频上传组件

